# CI Pipeline for YouTube Outlier Discovery Tool
# Runs on pull requests to main branch
name: CI

on:
  pull_request:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

  workflow_dispatch:

env:
  NODE_VERSION: '18'
  BUN_VERSION: 'latest'

jobs:
  # Pre-flight checks
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      server-changed: ${{ steps.changes.outputs.server }}
      python-changed: ${{ steps.changes.outputs.python }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            client:
              - 'client/**'
              - 'package.json'
              - 'jest.config.js'
            server:
              - 'server/**'
              - 'package.json'
              - 'jest.config.js'
            python:
              - 'server-python/**'
              - 'requirements.txt'

  # Security and dependency scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: |
          bun install
          cd client && bun install
          cd ../server && bun install

      - name: Run security audit
        run: |
          echo "🔍 Running security audit for root dependencies..."
          bun audit --production || true
          
          echo "🔍 Running security audit for client dependencies..."
          cd client && bun audit --production || true
          
          echo "🔍 Running security audit for server dependencies..."
          cd ../server && bun audit --production || true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Client-side testing and building
  client-pipeline:
    name: Client Pipeline
    runs-on: ubuntu-latest
    needs: [pre-checks]
    if: needs.pre-checks.outputs.client-changed == 'true'
    defaults:
      run:
        working-directory: ./client
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            ./client/node_modules
          key: ${{ runner.os }}-bun-client-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-client-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type checking
        run: bunx tsc --noEmit

      - name: Lint code
        run: bun run lint

      - name: Run tests
        run: bun test --coverage --coverage-reporter=json --coverage-reporter=text
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/coverage-final.json
          flags: client
          name: client-coverage

      - name: Build application
        run: bun run build
        env:
          NODE_ENV: production

      - name: Check bundle size
        run: |
          echo "📦 Checking bundle size..."
          if [ -d ".next" ]; then
            du -sh .next/static/chunks/*.js | head -10
            
            # Check if any chunk is over 500KB
            large_chunks=$(find .next/static/chunks -name "*.js" -size +500k)
            if [ ! -z "$large_chunks" ]; then
              echo "⚠️ Large bundle chunks detected:"
              echo "$large_chunks"
              exit 1
            fi
          fi

      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: |
            client/.next/
            !client/.next/cache/
          retention-days: 1

  # Server-side testing and building
  server-pipeline:
    name: Server Pipeline
    runs-on: ubuntu-latest
    needs: [pre-checks]
    if: needs.pre-checks.outputs.server-changed == 'true'
    defaults:
      run:
        working-directory: ./server

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: outlier_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            ./server/node_modules
          key: ${{ runner.os }}-bun-server-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-server-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp ../test/setup.js ./
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/outlier_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "JWT_SECRET=test_jwt_secret_key_for_ci" >> .env.test

      - name: Run database migrations
        run: bun run db:migrate
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/outlier_test

      - name: Lint code
        run: bun run lint

      - name: Run tests
        run: bun test --coverage --coverage-reporter=json --coverage-reporter=text
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/outlier_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/coverage-final.json
          flags: server
          name: server-coverage

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [client-pipeline, server-pipeline]
    if: always() && (needs.client-pipeline.result == 'success' || needs.client-pipeline.result == 'skipped') && (needs.server-pipeline.result == 'success' || needs.server-pipeline.result == 'skipped')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: outlier_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install all dependencies
        run: |
          bun install
          cd client && bun install
          cd ../server && bun install

      - name: Setup test environment
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/outlier_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "JWT_SECRET=test_jwt_secret_key_for_ci" >> .env.test

      - name: Run database migrations
        run: cd server && bun run db:migrate
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/outlier_test

      - name: Run integration tests
        run: bun run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/outlier_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci

  # Python server testing (if applicable)
  python-pipeline:
    name: Python Pipeline
    runs-on: ubuntu-latest
    needs: [pre-checks]
    if: needs.pre-checks.outputs.python-changed == 'true'
    defaults:
      run:
        working-directory: ./server-python

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort

      - name: Code formatting check
        run: |
          black --check src/
          isort --check-only src/

      - name: Lint code
        run: flake8 src/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run tests
        run: |
          pytest src/ --cov=src --cov-report=term-missing --cov-report=xml
        env:
          PYTHONPATH: ./src

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./server-python/coverage.xml
          flags: python
          name: python-coverage

  # Quality gate checks
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [security-scan, client-pipeline, server-pipeline, integration-tests, python-pipeline]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          path: ./coverage-reports
        continue-on-error: true

      - name: Validate coverage thresholds
        run: |
          echo "🔍 Validating coverage thresholds..."
          bun test/coverage/coverageThresholds.js
        continue-on-error: true

      - name: Check pipeline results
        run: |
          echo "📊 Pipeline Results Summary:"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Client Pipeline: ${{ needs.client-pipeline.result }}"
          echo "Server Pipeline: ${{ needs.server-pipeline.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Python Pipeline: ${{ needs.python-pipeline.result }}"
          
          # Fail if any critical job failed
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ Security scan failed - blocking merge"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "❌ Integration tests failed - blocking merge"
            exit 1
          fi

      - name: Quality gate passed
        run: |
          echo "✅ All quality gates passed!"
          echo "🚀 Ready for merge to main branch"